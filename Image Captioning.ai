import urllib
import requests
import os
urllib.request.urlretrieve("https://i.ibb.co/xY4DJJ5/img1.jpg", "img1.jpg")
urllib.request.urlretrieve("https://i.ibb.co/Gnd1Y1L/img2.jpg", "img2.jpg")
urllib.request.urlretrieve("https://i.ibb.co/Z6JgS1L/img3.jpg", "img3.jpg")
print('Images downloaded')
path = os.getcwd()
captionarr = [
	"This is the first caption",
	"This is the second caption",
	"This is the third caption"
	]
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw 
import os
def ext(file):
    index = file.find(".jpg")
    current_file = ""
    current_file = file[index:]
    return current_file 
def ext2(file):
    index = file.find(".jpeg")
    current_file = ""
    current_file = file[index:]
    return current_file 
def ext3(file):
    index = file.find(".png")
    current_file = ""
    current_file = file[index:]
    return current_file 
def convert(words):
    s = ""
    for word in words:
        s += word.upper() 
    return s
captionarr = ["caption one", "caption two", "caption three"]
caption_first = convert(captionarr[0])
caption_second = convert(captionarr[1])
caption_third = convert(captionarr[2])
print(caption_first)
print(caption_second)
print(caption_third)

count = 0

for f in os.listdir('.'):
    try:
        if (ext(f) == '.jpg' or ext2(f) == '.jpeg' or ext3(f) == '.png'):
            img = Image.open(f) 
            width, height = img.size
            basewidth = 1200
            wpercent = (basewidth / float(img.size[0]))
            hsize = int((float(img.size[1])*float(wpercent)))
            img = img.resize((basewidth, hsize), Image.Resampling.LANCZOS)
            new_width, new_height = img.size
            if not img.mode == 'RGB':
                img = img.convert('RGB')

            draw = ImageDraw.Draw(img)
            font = ImageFont.truetype("Arial Bold.ttf", 35) 
            if count == 0:
                draw.text((new_width / 15 + 25, new_height - 100),
                        caption_first, (255, 0, 0), font=font,
                        align="center")
            elif count == 1: 
                draw.text((new_width / 15 + 25, new_height - 100),
                        caption_second, (255, 0, 0), font=font,
                        align="center")
            else: 
                draw.text((new_width / 15 + 25, new_height - 100),
                        caption_third, (255, 0, 0), font=font,
                        align="center")
            if not os.path.exists("CaptionedImages"):
                os.makedirs("CaptionedImages")

            img.save("CaptionedImages/{}".format(f))     
            print('done')
            count = count + 1

    except OSError:
        pass
import os

directory = "./CaptionedImages"
if os.path.exists(directory) and os.path.isdir(directory):
    os.chdir(directory)

    fnames = []
    for file in os.listdir('.'):
        if os.path.isfile(file):
            fnames.append(file)
    fnames.sort(key=lambda x: os.stat(x).st_mtime, reverse=True)

    print(fnames)
else:
    print(f"Directory '{directory}' does not exist.")
pip install transformers pillow torch torchvision
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
import matplotlib.pyplot as plt
processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
image_paths = [
    "/content/img1.jpg",  
    "/content/img2.jpg",  
    "/content/img3.jpg"  
] 
plt.figure(figsize=(15, 5)) 
for i, image_path in enumerate(image_paths):
    image = Image.open(image_path)
    inputs = processor(images=image, return_tensors="pt")
    caption = model.generate(**inputs)
    caption_text = processor.decode(caption[0], skip_special_tokens=True)
    plt.subplot(1, 3, i + 1) 
    plt.imshow(image)
    plt.axis('off')  
    plt.title(caption_text)  
plt.tight_layout()  
plt.show()